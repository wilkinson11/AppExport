///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='£#,##0.00;-£#,##0.00';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='en-GB';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

///$tab Auto-generated section
///$autogenerated
Set dataManagerTables = '','Orders','Products','Supplier','Customers';
//This block renames script tables from non generated section which conflict with the names of managed tables

For each name in $(dataManagerTables) 
    Let index = 0;
    Let currentName = name; 
    Let tableNumber = TableNumber(name); 
    Let matches = 0; 
    Do while not IsNull(tableNumber) or (index > 0 and matches > 0)
        index = index + 1; 
        currentName = name & '-' & index; 
        tableNumber = TableNumber(currentName) 
        matches = Match('$(currentName)', $(dataManagerTables));
    Loop 
    If index > 0 then 
            Rename Table '$(name)' to '$(currentName)'; 
    EndIf; 
Next; 
Set dataManagerTables = ;


Unqualify *;

__countryAliasesBase:
LOAD
	Alias AS [__Country],
	ISO3Code AS [__ISO3Code]
FROM [lib://App Build:DataFiles/countryAliases.qvd]
(qvd);

__countryGeoBase:
LOAD
	ISO3Code AS [__ISO3Code],
	ISO2Code AS [__ISO2Code],
	Polygon AS [__Polygon]
FROM [lib://App Build:DataFiles/countryGeo.qvd]
(qvd);

__cityAliasesBase:
LOAD
	Alias AS [__City],
	geoKey AS [__geoKey],
	CountryCode AS [__CityCountryCode]
FROM [lib://App Build:DataFiles/cityAliases.qvd]
(qvd);

__cityGeoBase:
LOAD
	geoKey AS [__geoKey],
	geoPoint AS [__GeoPoint]
FROM [lib://App Build:DataFiles/cityGeo.qvd]
(qvd);

__countryName2IsoThree:
MAPPING LOAD
	__Country,
	__ISO3Code
RESIDENT __countryAliasesBase;

__countryCodeIsoThree2Polygon:
MAPPING LOAD
	__ISO3Code,
	__Polygon
RESIDENT __countryGeoBase;

__cityName2Key:
MAPPING LOAD
	__City,
	__geoKey
RESIDENT __cityAliasesBase;

__cityKey2GeoPoint:
MAPPING LOAD
	__geoKey,
	__GeoPoint
RESIDENT __cityGeoBase;

__countryCodeIsoTwo2Polygon:
MAPPING LOAD
	__ISO2Code,
	__Polygon
RESIDENT __countryGeoBase;

[Orders]:
LOAD
	[OrderID],
	[ProductID],
	[Quantity],
	[Sales],
	[Discount],
	[COS],
	[GP],
	[OrderDate],
	[CustomerID],
	[EmployeeID],
	[Freight],
	[ShipperID]
 FROM [lib://DataFiles/Sales Data (Full).xlsx]
(ooxml, embedded labels, table is Orders);

[Products]:
LOAD
	[CategoryID],
	[ProductID],
	[ProductName],
	[SupplierID],
	[CategoryName],
	[Description]
 FROM [lib://DataFiles/Sales Data (Full).xlsx]
(ooxml, embedded labels, table is Products);

[Supplier]:
LOAD
	[SupplierID],
	[Supplier],
	[SupplierContact],
	[SupplierCountry],
	APPLYMAP( '__countryCodeIsoThree2Polygon', APPLYMAP( '__countryName2IsoThree', LOWER([SupplierCountry])), '-') AS [Supplier.SupplierCountry_GeoInfo]
 FROM [lib://DataFiles/Sales Data (Full).xlsx]
(ooxml, embedded labels, table is Supplier);

[Customers]:
LOAD
	[Address],
	[City],
	[ContactName],
	[Country],
	[Customer],
	[CustomerID],
	[Fax],
	[Phone],
	[PostalCode],
	[CountryCode],
	[Latitude],
	[Longitude],
	[Customers.City_GeoInfo],
	[Customers.CountryCode_GeoInfo],
	[Longitude_Latitude],
	APPLYMAP( '__cityKey2GeoPoint', APPLYMAP( '__cityName2Key', LOWER([City])), '-') AS [Customers.City_GeoInfo_1],
	APPLYMAP( '__countryCodeIsoTwo2Polygon', UPPER([CountryCode]), '-') AS [Customers.CountryCode_GeoInfo_1],
	GeoMakePoint([Latitude], [Longitude]) AS [Longitude_Latitude_1]
 FROM [lib://DataFiles/Customers.qvd]
(qvd);



TAG FIELD [SupplierCountry] WITH '$geoname', '$relates_Supplier.SupplierCountry_GeoInfo';
TAG FIELD [Supplier.SupplierCountry_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_SupplierCountry';

TAG FIELD [City] WITH '$geoname', '$relates_Customers.City_GeoInfo_1';
TAG FIELD [Customers.City_GeoInfo_1] WITH '$geopoint', '$hidden', '$relates_City';
TAG FIELD [CountryCode] WITH '$geoname', '$relates_Customers.CountryCode_GeoInfo_1';
TAG FIELD [Customers.CountryCode_GeoInfo_1] WITH '$geopolygon', '$hidden', '$relates_CountryCode';

DROP TABLES __countryAliasesBase, __countryGeoBase, __cityAliasesBase, __cityGeoBase;
[autoCalendar]: 
  DECLARE FIELD DEFINITION Tagged ('$date')
FIELDS
  Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
  Month($1) AS [Month] Tagged ('$month', '$cyclic'),
  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,
  Year(Today())-Year($1) AS [YearsAgo] ,
  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,
  4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
  Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,
  12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,
  Month(Today())-Month($1) AS [MonthRelNo] ,
  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,
  (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,
  Week(Today())-Week($1) AS [WeekRelNo] ;

DERIVE FIELDS FROM FIELDS [OrderDate] USING [autoCalendar] ;